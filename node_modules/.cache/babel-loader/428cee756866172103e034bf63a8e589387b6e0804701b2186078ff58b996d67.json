{"ast":null,"code":"var _jsxFileName = \"/Users/carlos/Desktop/React/Invest Calculator/src/App.js\",\n  _s = $RefreshSig$();\nimport Header from \"./Components/Header/Header\";\nimport ResultsTable from \"./Components/ResultsTable/ResultsTable\";\nimport InputHandler from \"./Components/Handlers/InputHandler\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState(null);\n  const calculateHandler = userInput => {\n    setUserInput(userInput);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    const yearlyData = []; // per-year results\n\n    if (userInput) {\n      let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n      const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n      const expectedReturn = +userInput[\"expected-return\"] / 100;\n      const duration = +userInput[\"duration\"];\n\n      // The below code calculates yearly results (total savings, interest etc)\n      for (let i = 0; i < duration; i++) {\n        const yearlyInterest = currentSavings * expectedReturn;\n        currentSavings += yearlyInterest + yearlyContribution;\n        yearlyData.push({\n          // feel free to change the shape of the data pushed to the array!\n          year: i + 1,\n          yearlyInterest: yearlyInterest,\n          savingsEndOfYear: currentSavings,\n          yearlyContribution: yearlyContribution\n        });\n      }\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputHandler, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), !userInput && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No calculated results yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 22\n    }, this), userInput && /*#__PURE__*/_jsxDEV(ResultsTable, {\n      data: yearlyData,\n      initialInvestment: userInput[\"current-savings\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nCOotz9vTgzH/m310d2/03oFEtk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","ResultsTable","InputHandler","useState","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","data","initialInvestment","_c","$RefreshReg$"],"sources":["/Users/carlos/Desktop/React/Invest Calculator/src/App.js"],"sourcesContent":["import Header from \"./Components/Header/Header\";\nimport ResultsTable from \"./Components/ResultsTable/ResultsTable\";\nimport InputHandler from \"./Components/Handlers/InputHandler\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [userInput, setUserInput] = useState(null);\n  const calculateHandler = (userInput) => {\n    setUserInput(userInput);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    const yearlyData = []; // per-year results\n\n    if (userInput) {\n      let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n      const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n      const expectedReturn = +userInput[\"expected-return\"] / 100;\n      const duration = +userInput[\"duration\"];\n\n      // The below code calculates yearly results (total savings, interest etc)\n      for (let i = 0; i < duration; i++) {\n        const yearlyInterest = currentSavings * expectedReturn;\n        currentSavings += yearlyInterest + yearlyContribution;\n        yearlyData.push({\n          // feel free to change the shape of the data pushed to the array!\n          year: i + 1,\n          yearlyInterest: yearlyInterest,\n          savingsEndOfYear: currentSavings,\n          yearlyContribution: yearlyContribution,\n        });\n      }\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header />\n      <InputHandler onCalculate={calculateHandler} />\n      {!userInput && <p>No calculated results yet.</p>}\n      {userInput && (\n        <ResultsTable\n          data={yearlyData}\n          initialInvestment={userInput[\"current-savings\"]}\n        />\n      )}\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,YAAY,MAAM,oCAAoC;AAC7D,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMO,gBAAgB,GAAIF,SAAS,IAAK;IACtCC,YAAY,CAACD,SAAS,CAAC;IACvB;IACA;IACA,MAAMG,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIH,SAAS,EAAE;MACb,IAAII,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;MACpD,MAAMK,kBAAkB,GAAG,CAACL,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;MAC9D,MAAMM,cAAc,GAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;MAC1D,MAAMO,QAAQ,GAAG,CAACP,SAAS,CAAC,UAAU,CAAC;;MAEvC;MACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;QACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;QACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;QACrDF,UAAU,CAACO,IAAI,CAAC;UACd;UACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;UACXC,cAAc,EAAEA,cAAc;UAC9BG,gBAAgB,EAAER,cAAc;UAChCC,kBAAkB,EAAEA;QACtB,CAAC,CAAC;MACJ;IACF;;IAEA;EACF,CAAC;;EAED,oBACER,OAAA;IAAAgB,QAAA,gBACEhB,OAAA,CAACL,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVpB,OAAA,CAACH,YAAY;MAACwB,WAAW,EAAEhB;IAAiB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC9C,CAACjB,SAAS,iBAAIH,OAAA;MAAAgB,QAAA,EAAG;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC/CjB,SAAS,iBACRH,OAAA,CAACJ,YAAY;MACX0B,IAAI,EAAEhB,UAAW;MACjBiB,iBAAiB,EAAEpB,SAAS,CAAC,iBAAiB;IAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGE,CAAC;AAEV;AAAClB,EAAA,CA9CQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}