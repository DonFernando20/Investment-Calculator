{"ast":null,"code":"import _slicedToArray from\"/Users/carlos/Desktop/React/Invest Calculator/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import Header from\"./Components/Header/Header\";import ResultsTable from\"./Components/ResultsTable/ResultsTable\";import InputHandler from\"./Components/Handlers/InputHandler\";import{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),userInput=_useState2[0],setUserInput=_useState2[1];var calculateHandler=function calculateHandler(userInput){setUserInput(userInput);// Should be triggered when form is submitted\n// You might not directly want to bind it to the submit event on the form though...\n};var yearlyData=[];// per-year results\nif(userInput){var currentSavings=+userInput[\"current-savings\"];// feel free to change the shape of this input object!\nvar yearlyContribution=+userInput[\"yearly-contribution\"];// as mentioned: feel free to change the shape...\nvar expectedReturn=+userInput[\"expected-return\"]/100;var duration=+userInput[\"duration\"];// The below code calculates yearly results (total savings, interest etc)\nfor(var i=0;i<duration;i++){var yearlyInterest=currentSavings*expectedReturn;currentSavings+=yearlyInterest+yearlyContribution;yearlyData.push({// feel free to change the shape of the data pushed to the array!\nyear:i+1,yearlyInterest:yearlyInterest,savingsEndOfYear:currentSavings,yearlyContribution:yearlyContribution});}// do something with yearlyData ...\n}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(InputHandler,{onCalculate:calculateHandler}),!userInput&&/*#__PURE__*/_jsx(\"p\",{style:{textAlign:\"center\"},children:\"No calculated results yet.\"}),userInput&&/*#__PURE__*/_jsx(ResultsTable,{data:yearlyData,initialInvestment:userInput[\"current-savings\"]})]});}export default App;","map":{"version":3,"names":["Header","ResultsTable","InputHandler","useState","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","userInput","setUserInput","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","onCalculate","style","textAlign","data","initialInvestment"],"sources":["/Users/carlos/Desktop/React/Invest Calculator/src/App.js"],"sourcesContent":["import Header from \"./Components/Header/Header\";\nimport ResultsTable from \"./Components/ResultsTable/ResultsTable\";\nimport InputHandler from \"./Components/Handlers/InputHandler\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [userInput, setUserInput] = useState(null);\n  const calculateHandler = (userInput) => {\n    setUserInput(userInput);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n  };\n  const yearlyData = []; // per-year results\n\n  if (userInput) {\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\n  }\n\n  return (\n    <div>\n      <Header />\n      <InputHandler onCalculate={calculateHandler} />\n      {!userInput && (\n        <p style={{ textAlign: \"center\" }}>No calculated results yet.</p>\n      )}\n      {userInput && (\n        <ResultsTable\n          data={yearlyData}\n          initialInvestment={userInput[\"current-savings\"]}\n        />\n      )}\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"mIAAA,MAAO,CAAAA,MAAM,KAAM,4BAA4B,CAC/C,MAAO,CAAAC,YAAY,KAAM,wCAAwC,CACjE,MAAO,CAAAC,YAAY,KAAM,oCAAoC,CAC7D,OAASC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEjC,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,IAAAC,SAAA,CAAkCN,QAAQ,CAAC,IAAI,CAAC,CAAAO,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAzCG,SAAS,CAAAF,UAAA,IAAEG,YAAY,CAAAH,UAAA,IAC9B,GAAM,CAAAI,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIF,SAAS,CAAK,CACtCC,YAAY,CAACD,SAAS,CAAC,CACvB;AACA;AACF,CAAC,CACD,GAAM,CAAAG,UAAU,CAAG,EAAE,CAAE;AAEvB,GAAIH,SAAS,CAAE,CACb,GAAI,CAAAI,cAAc,CAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,CAAE;AACpD,GAAM,CAAAK,kBAAkB,CAAG,CAACL,SAAS,CAAC,qBAAqB,CAAC,CAAE;AAC9D,GAAM,CAAAM,cAAc,CAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,CAAG,GAAG,CAC1D,GAAM,CAAAO,QAAQ,CAAG,CAACP,SAAS,CAAC,UAAU,CAAC,CAEvC;AACA,IAAK,GAAI,CAAAQ,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGD,QAAQ,CAAEC,CAAC,EAAE,CAAE,CACjC,GAAM,CAAAC,cAAc,CAAGL,cAAc,CAAGE,cAAc,CACtDF,cAAc,EAAIK,cAAc,CAAGJ,kBAAkB,CACrDF,UAAU,CAACO,IAAI,CAAC,CACd;AACAC,IAAI,CAAEH,CAAC,CAAG,CAAC,CACXC,cAAc,CAAEA,cAAc,CAC9BG,gBAAgB,CAAER,cAAc,CAChCC,kBAAkB,CAAEA,kBACtB,CAAC,CAAC,CACJ,CAEA;AACF,CAEA,mBACEV,KAAA,QAAAkB,QAAA,eACEpB,IAAA,CAACL,MAAM,GAAE,CAAC,cACVK,IAAA,CAACH,YAAY,EAACwB,WAAW,CAAEZ,gBAAiB,CAAE,CAAC,CAC9C,CAACF,SAAS,eACTP,IAAA,MAAGsB,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAS,CAAE,CAAAH,QAAA,CAAC,4BAA0B,CAAG,CACjE,CACAb,SAAS,eACRP,IAAA,CAACJ,YAAY,EACX4B,IAAI,CAAEd,UAAW,CACjBe,iBAAiB,CAAElB,SAAS,CAAC,iBAAiB,CAAE,CACjD,CACF,EAGE,CAAC,CAEV,CAEA,cAAe,CAAAJ,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}